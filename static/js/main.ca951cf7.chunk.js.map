{"version":3,"sources":["components/Menu.js","graphql/mutations.js","graphql/queries.js","Pages/ShowTodo.js","components/Footer/Footr.js","Pages/AddTodo.js","App.js","graphql/client.js","index.js"],"names":["Example","props","useState","isOpen","Navbar","color","light","expand","NavbarBrand","className","Collapse","navbar","Nav","NavbarText","TOGGLE_TODOS","gql","ADD_TODOS","GET_TODOS","ShowTodo","useQuery","data","loading","error","useMutation","toggleTodo","type","height","width","handleToggleTodo","id","DoneStatus","variables","then","res","console","log","window","location","reload","catch","Todo","length","map","todo","startDate","StartTime","substring","starttime","endDate","EndTime","endtime","start","end","key","Container","Row","Col","sm","xl","aria-hidden","onClick","Title","Description","class","Footer","fluid","Component","AddTodo","addTodo","Date","startTime","onChange","endTime","changeEndTime","React","description","setDescription","title","setTitle","Menu","onSubmit","e","preventDefault","trim","refetchQueries","query","alert","placeholder","target","value","required","format","yearPlaceholder","monthPlaceholder","dayPlaceholder","hourPlaceholder","minutePlaceholder","secondPlaceholder","App","client","ApolloClient","uri","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.ca951cf7.chunk.js","sourcesContent":["import React, { useState } from 'react';\nimport {\n  Collapse,\n  Navbar,\n  NavbarBrand,\n  Nav,\n  NavbarText\n} from 'reactstrap';\nimport './menu.css';\n\nconst Example = (props) => {\n  const [isOpen] = useState(false);\n\n  return (\n    <div>\n      <Navbar color=\"light\" light expand=\"md\">\n        <NavbarBrand className='brand'>\n          Learncool\n        </NavbarBrand>\n        {/* <NavbarToggler onClick={toggle} /> */}\n        <Collapse isOpen={isOpen} navbar>\n          <Nav className=\"mr-auto\" navbar />\n          <NavbarText className='pr-5'>\n            <h4>Task Scheduler</h4>\n          </NavbarText>\n        </Collapse>\n      </Navbar>\n    </div>\n  );\n}\n\nexport default Example;","import { gql } from 'apollo-boost';\n\nexport const TOGGLE_TODOS = gql`\nmutation toggleTodo($id: uuid!, $DoneStatus: String!) {\n    update_Todo(where: {id: {_eq: $id}}, _set: {DoneStatus: $DoneStatus}) {\n      returning {\n        Description\n        DoneStatus\n        Title\n        date\n        id\n        EndTime\n        StartTime\n      }\n    }\n  }\n`\n\nexport const ADD_TODOS = gql`\nmutation insert_Todo($Description: String!, $Title: String!, $StartTime: timestamptz!, $EndTime:timestamptz!) {\n  insert_Todo(objects: {Description: $Description, Title: $Title, EndTime: $EndTime, StartTime: $StartTime}) {\n    returning {\n      Description\n      Title\n      DoneStatus\n      date\n      EndTime\n      StartTime\n    }\n  }\n}\n\n`","import { gql } from \"apollo-boost\";\n\nexport const GET_TODOS = gql`\nquery MyQuery {\n  Todo (where: {DoneStatus: {_eq: \"false\"}}) {\n    Description\n    EndTime\n    StartTime\n    Title\n    id\n    DoneStatus\n  }\n}\n`\n","import React from \"react\";\nimport { useQuery, useMutation } from \"@apollo/react-hooks\";\nimport { GET_TODOS } from \"../graphql/queries\";\nimport { TOGGLE_TODOS } from \"../graphql/mutations\";\nimport Loader from \"react-loader-spinner\";\nimport { Container, Row, Col } from \"reactstrap\";\n\nconst ShowTodo = () => {\n  const { data, loading, error } = useQuery(GET_TODOS);\n  const [toggleTodo] = useMutation(TOGGLE_TODOS);\n\n  if (loading)\n    return (\n      <div>\n        <h5>Please wait while we load the scheduled tasks.</h5>\n        <Loader type=\"Rings\" color=\"#20b2aa\" height={100} width={100} />\n      </div>\n    );\n  if (error) return <div>Something went wrong . . . . . .</div>;\n\n  function handleToggleTodo({ id, DoneStatus }) {\n    if (DoneStatus === \"false\") DoneStatus = \"true\";\n    else DoneStatus = \"false\";\n\n    const variables = {\n      id,\n      DoneStatus,\n    };\n\n    toggleTodo({ variables })\n      .then((res) => {\n        console.log(\"Todo updated, \", res);\n\n        // Refresh the page after Todo item is deleted\n        window.location.reload(false);\n      })\n      .catch((error) => {\n        console.log(\"Error in Toggle function, \", error);\n      });\n  }\n\n  const DisplayTodo = () => {\n    if (data.Todo.length === 0) {\n      return <h1 className=\"text-center\">No Tasks scheduled yet.</h1>;\n    } else {\n      return data.Todo.map((todo) => {\n        const startDate = todo.StartTime.substring(0, 10);\n        const starttime = todo.StartTime.substring(12, 19);\n        const endDate = todo.EndTime.substring(0, 10);\n        const endtime = todo.EndTime.substring(12, 19);\n        var start = `${starttime}, ${startDate}`;\n        var end = `${endtime}, ${endDate}`;\n\n        return (\n          <div className=\"todo\" key={todo.id}>\n            <Container>\n              <Row>\n                <Col sm={4} xl={1} className=\"close1\">\n                  <i\n                    aria-hidden=\"true\"\n                    className=\"close link icon\"\n                    onClick={() => handleToggleTodo(todo)}\n                  />\n                </Col>\n                <Col sm={8} xl={11} className=\"desc\">\n                  <strong>Title: </strong>\n                  {todo.Title}\n                  <br />\n                  <strong>Description: </strong>\n                  {todo.Description}\n                  <br />\n                  {/* <strong>Scheduled Time: </strong> */}\n                  <span className='time'>\n                  {start} to {end}\n                  </span>\n                  <br />\n                </Col>\n                <Col sm={4} xl={1} className=\"close2\">\n                  <i\n                    aria-hidden=\"true\"\n                    class=\"close link icon\"\n                    onClick={() => handleToggleTodo(todo)}\n                  />\n                </Col>\n              </Row>\n            </Container>\n          </div>\n        );\n      });\n    }\n  };\n\n  return <div className=\"text-left\">{DisplayTodo()}</div>;\n};\n\nexport default ShowTodo;\n","import React, { Component } from 'react';\nimport { Container } from 'reactstrap';\n\nimport './footer.css';\n\nclass Footer extends Component {\n    render() { \n        return (\n            <Container className=\"themed-container footer bg-dark text-center\" fluid={true}>\n                &#169; Learncool Pvt. Ltd.\n            </Container>\n        );\n    }\n}\n \nexport default Footer;","import React, { useState } from \"react\";\nimport Menu from \"../components/Menu\";\nimport { ADD_TODOS } from \"../graphql/mutations\";\nimport { GET_TODOS } from \"../graphql/queries\";\nimport { useMutation } from \"@apollo/react-hooks\";\nimport ShowTodo from \"./ShowTodo\";\nimport { Container } from \"reactstrap\";\nimport DateTimePicker from \"react-datetime-picker\";\n\nimport \"./style.css\";\nimport Footer from \"../components/Footer/Footr\";\n\nconst AddTodo = () => {\n  const [addTodo] = useMutation(ADD_TODOS);\n\n  const [startTime, onChange] = useState(new Date());\n  const [endTime, changeEndTime] = useState(new Date());\n  const [description, setDescription] = React.useState(\"\");\n  const [title, setTitle] = React.useState(\"\");\n\n  function handleSubmit(e) {\n    e.preventDefault();\n    if (!title.trim() && !description.trim()) return;\n\n    var variables = {\n      Title: title,\n      Description: description,\n      StartTime: startTime,\n      EndTime: endTime,\n    };\n\n    addTodo({\n      variables: variables,\n      refetchQueries: [{ query: GET_TODOS }],\n    }).then(() => {\n      alert(\"Todo Added\");\n      setDescription(\"\");\n      setTitle(\"\");\n    });\n  }\n  return (\n    <div>\n      <Menu />\n      <Container className=\"text-center\">\n        <h2 className=\"mt-4\">Add a Todo</h2>\n        <form onSubmit={handleSubmit} className=\"form\">\n          <input\n            className=\"field\"\n            type=\"text\"\n            placeholder=\"Enter the Title\"\n            onChange={(e) => setTitle(e.target.value)}\n            value={title}\n            required\n          />\n          <br />\n          <br />\n          <input\n            className=\"field\"\n            type=\"text\"\n            placeholder=\"description\"\n            onChange={(e) => setDescription(e.target.value)}\n            value={description}\n            required\n          />\n          <br />\n          <br />\n          <label>Start Time: &ensp;</label> \n          <DateTimePicker \n          onChange={onChange} \n          value={startTime} \n          format='dd-MM-y h:mm:ss a'\n          yearPlaceholder='yy'\n          monthPlaceholder='mm'\n          dayPlaceholder='dd'\n          hourPlaceholder='hr'\n          minutePlaceholder='min'\n          secondPlaceholder='ss'\n          /><br /><br />\n          <label>End Time: &ensp;</label> \n          <DateTimePicker \n          onChange={changeEndTime} \n          value={endTime} \n          format='dd-MM-y h:mm:ss a'\n          yearPlaceholder='yy'\n          monthPlaceholder='mm'\n          dayPlaceholder='dd'\n          hourPlaceholder='hr'\n          minutePlaceholder='min'\n          secondPlaceholder='ss'\n          /><br /><br />\n          <button type=\"submit\" className=\"btn\">\n            Create a Todo\n          </button>\n          <br />\n          <br />\n        </form>\n        <ShowTodo />\n      </Container>\n      <Footer />\n    </div>\n  );\n};\n\nexport default AddTodo;\n","import React from \"react\";\nimport { BrowserRouter } from \"react-router-dom\";\nimport AddTodo from \"./Pages/AddTodo\";\n\nfunction App() {\n  return (\n    <BrowserRouter>\n      <div className=\"App\">\n        <AddTodo />\n      </div>\n    </BrowserRouter>\n  );\n}\n\nexport default App;\n","import ApolloClient from 'apollo-boost';\n\nconst client = new ApolloClient({\n    uri: 'https://knowing-akita-91.hasura.app/v1/graphql'\n});\n\nexport default client;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport 'semantic-ui-css/semantic.min.css';\nimport \"react-loader-spinner/dist/loader/css/react-spinner-loader.css\";\nimport App from './App';\nimport { ApolloProvider } from '@apollo/react-hooks';\nimport client from './graphql/client';\n\nReactDOM.render(\n  <ApolloProvider client={client}>\n    <App />\n  </ApolloProvider>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}